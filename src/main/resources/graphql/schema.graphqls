type Query {
    cities: [City!]!
    city(id: ID!): City!
    citiesByName(name: String!): [City]!
    human(id: ID!): Human!
    humans: [Human!]!
    humansByCity(cityId: ID!): [Human!]!
    humansByJob(job: String!): [Human!]!
}

type Mutation {
    createHuman(input: HumanInput!): Human
    updateHuman(id: ID!, input: HumanInput!): Human
    deleteHuman(id: ID!): Boolean
    createCity(input: CityInput!): City
    updateCity(id: ID!, input: CityInput!): City
    deleteCity(id: ID!): Boolean
    startSimulation(cityId: ID!): String!
    stopSimulation(cityId: ID!): String!
    isSimulationRunning(cityId: ID!): Boolean!
}

type Subscription {
    humansByCityPositions(cityId: ID!): [Human!]!
}

type Human {
    id: ID!
    age: Int
    city: City
    happiness: Float!
    job: String
    name: String
    x: Float!
    y: Float!
}

input HumanInput {
    age: Int!
    cityId: ID!
    happiness: Float!
    job: String
    name: String!
    x: Float!
    y: Float!
}

type City {
    id: ID!
    name: String
    humans: [Human!]
}

input CityInput {
    name: String!
}



